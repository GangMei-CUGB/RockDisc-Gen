import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
import seaborn as sns
import os

def plot_dip_direction_histogram(observed_data_path, generated_data_path, output_path):
    """
    绘制观测数据与生成数据的Dip direction直方图和概率密度曲线比较
    
    参数:
        observed_data_path (str): 观测数据CSV文件路径
        generated_data_path (str): 生成数据CSV文件路径  
        output_path (str): 图片保存目录
        
    返回:
        matplotlib.figure.Figure: 生成的图表对象
    """
    # 设置图形风格
    plt.rcParams['font.family'] = ['Times New Roman','Simsun']
    plt.rcParams['font.size'] = 10
    plt.rcParams['mathtext.fontset'] = 'stix'
    plt.style.use('seaborn-v0_8-whitegrid')

    # 读取数据
    df_obs = pd.read_csv(observed_data_path)
    df_gen = pd.read_csv(generated_data_path)

    # 创建图形
    fig, ax = plt.subplots(figsize=(10, 6))
    ax1 = ax.twinx()

    # 绘制观测数据直方图
    num, ticks = np.histogram(df_obs.iloc[:, 0], bins=np.arange(0, 70, 5))
    wids = 2.5
    ax.bar(ticks[:-1] + 0.5*wids, num, wids, 
           ec='#1b9e77', fc='#1b9e77', zorder=10, label='Observed')

    # 绘制观测数据概率密度曲线
    mean = np.mean(df_obs.iloc[:, 0])
    std = np.std(df_obs.iloc[:, 0])
    x = np.linspace(mean - 4*std, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#1b9e77')

    # 绘制生成数据直方图
    num, ticks = np.histogram(df_gen.iloc[:, 0], bins=np.arange(0, 70, 5))
    ax.bar(ticks[:-1] + 1.5*wids, num, wids,
           ec='#377eb8', fc='#377eb8', zorder=10, label='Generated by GAN')

    # 绘制生成数据概率密度曲线
    mean = np.mean(df_gen.iloc[:, 0])
    std = np.std(df_gen.iloc[:, 0])
    x = np.linspace(mean - 4*std, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#377eb8')

    # 设置坐标轴范围
    ax.set_ylim(0, 250)
    ax1.set_ylim(0, 0.06)
    ax1.set_yticks([])
    ax.set_xlim(xmin=0)

    # 添加网格和样式
    ax.grid(axis='y', lw=0.8, color='lightgrey', ls='--')
    ax.tick_params(direction='in')

    # 添加标签和图例
    ax.set_xlabel('Dip direction (°)')
    ax.set_ylabel('Count')
    ax.legend()

    # 保存图形
    filename = "dip_direction_histogram.png"
    full_output_path = os.path.join(output_path, filename)
    plt.savefig(full_output_path, dpi=600, bbox_inches='tight')

    return fig


def plot_dip_angle_histogram(observed_data_path, generated_data_path, output_path):
    """
    绘制观测数据与生成数据的Dip angle直方图和概率密度曲线比较
    
    参数:
        observed_data_path (str): 观测数据CSV文件路径
        generated_data_path (str): 生成数据CSV文件路径  
        output_path (str): 图片保存目录
        
    返回:
        matplotlib.figure.Figure: 生成的图表对象
    """
    # 设置图形风格
    plt.rcParams['font.family'] = ['Times New Roman','Simsun']
    plt.rcParams['font.size'] = 10
    plt.rcParams['mathtext.fontset'] = 'stix'
    plt.style.use('seaborn-v0_8-whitegrid')

    # 读取数据
    df_obs = pd.read_csv(observed_data_path)
    df_gen = pd.read_csv(generated_data_path)

    # 创建图形
    fig, ax = plt.subplots(figsize=(10, 6))
    ax1 = ax.twinx()

    # 绘制观测数据直方图
    num, ticks = np.histogram(df_obs.iloc[:, 1], bins=np.arange(210, 321, 10))
    wids = 5
    ax.bar(ticks[:-1] + 0.5*wids, num, wids, 
           ec='#1b9e77', fc='#1b9e77', zorder=10, label='Observed')

    # 绘制观测数据概率密度曲线
    mean = np.mean(df_obs.iloc[:, 1])
    std = np.std(df_obs.iloc[:, 1])
    x = np.linspace(mean - 4*std, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#1b9e77')

    # 绘制生成数据直方图
    num, ticks = np.histogram(df_gen.iloc[:, 1], bins=np.arange(210, 321, 10))
    ax.bar(ticks[:-1] + 1.5*wids, num, wids,
           ec='#377eb8', fc='#377eb8', zorder=10, label='Generated by GAN')

    # 绘制生成数据概率密度曲线
    mean = np.mean(df_gen.iloc[:, 1])
    std = np.std(df_gen.iloc[:, 1])
    x = np.linspace(mean - 4*std, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#377eb8')

    # 设置坐标轴范围
    ax.set_ylim(0, 400)
    ax1.set_ylim(0, 0.05)
    ax1.set_yticks([])
    ax.set_xlim(xmin=210)

    # 添加网格和样式
    ax.grid(axis='y', lw=0.8, color='lightgrey', ls='--')
    ax.tick_params(direction='in')

    # 添加标签和图例
    ax.set_xlabel('Dip angle (°)')
    ax.set_ylabel('Count')
    ax.legend()

    # 保存图形
    filename = "dip_angle_histogram.png"
    full_output_path = os.path.join(output_path, filename)
    plt.savefig(full_output_path, dpi=600, bbox_inches='tight')

    return fig

def plot_trail_length_histogram(observed_data_path, generated_data_path, output_path):
    """
    绘制观测数据与生成数据的Trail length直方图和概率密度曲线比较
    
    参数:
        observed_data_path (str): 观测数据CSV文件路径
        generated_data_path (str): 生成数据CSV文件路径  
        output_path (str): 图片保存目录
        
    返回:
        matplotlib.figure.Figure: 生成的图表对象
    """
    # 设置图形风格
    plt.rcParams['font.family'] = ['Times New Roman','Simsun']
    plt.rcParams['font.size'] = 10
    plt.rcParams['mathtext.fontset'] = 'stix'
    plt.style.use('seaborn-v0_8-whitegrid')

    # 读取数据
    df_obs = pd.read_csv(observed_data_path)
    df_gen = pd.read_csv(generated_data_path)

    # 创建图形
    fig, ax = plt.subplots(figsize=(10, 6))
    ax1 = ax.twinx()

    # 绘制观测数据直方图
    num, ticks = np.histogram(df_obs.iloc[:, 2], bins=np.arange(0, 33, 2))
    wids = 1
    ax.bar(ticks[:-1] + 0.5*wids, num, wids, 
           ec='#1b9e77', fc='#1b9e77', zorder=10, label='Observed')

    # 绘制观测数据概率密度曲线
    mean = np.mean(df_obs.iloc[:, 2])
    std = np.std(df_obs.iloc[:, 2])
    x = np.linspace(0, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#1b9e77')

    # 绘制生成数据直方图
    num, ticks = np.histogram(df_gen.iloc[:, 2], bins=np.arange(0, 33, 2))
    ax.bar(ticks[:-1] + 1.5*wids, num, wids,
           ec='#377eb8', fc='#377eb8', zorder=10, label='Generated by GAN')

    # 绘制生成数据概率密度曲线
    mean = np.mean(df_gen.iloc[:, 2])
    std = np.std(df_gen.iloc[:, 2])
    x = np.linspace(0, mean + 4*std, 1000)
    y = norm.pdf(x, mean, std)
    ax1.plot(x, y, color='#377eb8')

    # 设置坐标轴范围
    ax.set_ylim(0, 450)
    ax1.set_ylim(0, 0.18)
    ax1.set_yticks([])
    ax.set_xlim(xmin=0)

    # 添加网格和样式
    ax.grid(axis='y', lw=0.8, color='lightgrey', ls='--')
    ax.tick_params(direction='in')

    # 添加标签和图例
    ax.set_xlabel('Trail length')
    ax.set_ylabel('Count')
    ax.legend()

    # 保存图形
    filename = "trail_length_histogram.png"
    full_output_path = os.path.join(output_path, filename)
    plt.savefig(full_output_path, dpi=600, bbox_inches='tight')

    return fig

